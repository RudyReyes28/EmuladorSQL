/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.rudyreyes.emuladorsql.vista;

import com.rudyreyes.emuladorsql.modelo.archivos.Proyecto;
import com.rudyreyes.emuladorsql.vista.util.NodoDirectorio;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import java.io.File;
import javax.swing.JMenuItem;
import javax.swing.JPopupMenu;
import javax.swing.JTree;
import javax.swing.SwingUtilities;
import javax.swing.tree.*;
/**
 *
 * @author rudyo
 */
public class VentanaPrincipal extends javax.swing.JFrame {
    Proyecto proyecto;
    private DefaultMutableTreeNode nodoProyecto;
    private DefaultTreeModel modeloArbol;

    /**
     * Creates new form VentanaPrincipal
     */
    public VentanaPrincipal() {
        
        initComponents();
        nodoProyecto = new DefaultMutableTreeNode("Proyecto");
        modeloArbol = new DefaultTreeModel(nodoProyecto);
        arbolProyecto.setModel(modeloArbol);
        tooltipArbol();
        crearArchivos();
        setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        nuevoProyecto = new javax.swing.JButton();
        scrollArbol = new javax.swing.JScrollPane();
        arbolProyecto = new javax.swing.JTree();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        nuevoProyecto.setText("Nuevo");
        nuevoProyecto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nuevoProyectoActionPerformed(evt);
            }
        });

        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("root");
        arbolProyecto.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        scrollArbol.setViewportView(arbolProyecto);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(scrollArbol, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nuevoProyecto))
                .addContainerGap(499, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(nuevoProyecto)
                .addGap(18, 18, 18)
                .addComponent(scrollArbol, javax.swing.GroupLayout.PREFERRED_SIZE, 348, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(15, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tooltipArbol(){
        arbolProyecto.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
             public void mouseMoved(MouseEvent evt) {
            // Obtener la información del nodo
            TreePath path = arbolProyecto.getPathForLocation(evt.getX(), evt.getY());
            if (path != null) {
                Object node = path.getLastPathComponent();
                if (node instanceof NodoDirectorio) {
                        NodoDirectorio nodoDirectorio = (NodoDirectorio) node;
                        arbolProyecto.setToolTipText(nodoDirectorio.getUbicacion());
                }
            }
        }
        });
    }
    
    private void crearArchivos(){
        arbolProyecto.addMouseListener(new MouseAdapter() {
            public void mousePressed(MouseEvent e) {
                if (SwingUtilities.isRightMouseButton(e)) {
                    TreePath path = arbolProyecto.getPathForLocation(e.getX(), e.getY());
                    if (path != null) {
                        arbolProyecto.setSelectionPath(path);
                        Object selectedNode = path.getLastPathComponent();
                        
                        if (selectedNode instanceof NodoDirectorio) {
                            mostrarMenuContextual(e);
                        }
                    }
                }
            }
        });
    }
    
    private void mostrarMenuContextual(MouseEvent e) {
        JPopupMenu popupMenu = new JPopupMenu();

        JMenuItem nuevoDirectorioItem = new JMenuItem("Nuevo Directorio");
        JMenuItem nuevoArchivoItem = new JMenuItem("Nuevo Archivo");

        nuevoDirectorioItem.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                // Lógica para crear un nuevo directorio
                TreePath selectedPath = arbolProyecto.getSelectionPath();
                NodoDirectorio selectedNode = (NodoDirectorio) selectedPath.getLastPathComponent();
                String ubicacionProyecto = selectedNode.getUbicacion();
                
                
                if (selectedNode.isDirectorio()) {
                    
                    String nombreDirectorio = JOptionPane.showInputDialog(null, "Ingrese el nombre del directorio:");

                    if (nombreDirectorio != null && !nombreDirectorio.isEmpty()) {

                        String pathDirectorio = ubicacionProyecto + File.separator + nombreDirectorio;

                        proyecto.crearDirectorio(nombreDirectorio, pathDirectorio);
                        
                        NodoDirectorio nuevoNodo = new NodoDirectorio(nombreDirectorio, pathDirectorio);
                        selectedNode.add(nuevoNodo);
                        
                        modeloArbol.reload();

                    }
                }else{
                    JOptionPane.showMessageDialog(null, "No se puede crear un archivo en un archivo");
                }

                
            }
        });

        nuevoArchivoItem.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                // Lógica para crear un nuevo directorio
                TreePath selectedPath = arbolProyecto.getSelectionPath();
                NodoDirectorio nodoSeleccion = (NodoDirectorio) selectedPath.getLastPathComponent();
                String ubicacionProyecto = nodoSeleccion.getUbicacion();
                
                if (nodoSeleccion.isDirectorio()) {
                    String nombreArchivo = JOptionPane.showInputDialog(null, "Ingrese el nombre del archivo:");

                    if (nombreArchivo != null && !nombreArchivo.isEmpty()) {

                        String pathArchivo = ubicacionProyecto + File.separator + nombreArchivo+".csv";

                        proyecto.crearArchivo(nombreArchivo, pathArchivo);
                        
                        NodoDirectorio nuevoNodo = new NodoDirectorio(nombreArchivo, pathArchivo);
                        nodoSeleccion.add(nuevoNodo);
                        
                        modeloArbol.reload();

                    }
                }else{
                    JOptionPane.showMessageDialog(null, "No se puede crear un archivo en un archivo");
                }
            }
        });

        popupMenu.add(nuevoDirectorioItem);
        popupMenu.add(nuevoArchivoItem);

        popupMenu.show(e.getComponent(), e.getX(), e.getY());
    }
    
    private void nuevoProyectoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nuevoProyectoActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);

        int seleccion = fileChooser.showDialog(this, "Seleccionar Carpeta");

        if (seleccion == JFileChooser.APPROVE_OPTION) {
            String nombreProyecto = JOptionPane.showInputDialog(this, "Ingrese el nombre del proyecto:");

            if (nombreProyecto != null && !nombreProyecto.isEmpty()) {
                String ubicacionProyecto = fileChooser.getSelectedFile().getPath();
                
                String pathProyecto = ubicacionProyecto+File.separator+nombreProyecto;
                
                System.out.println(pathProyecto);
                proyecto = new Proyecto(nombreProyecto, pathProyecto);
                
                proyecto.crearProyecto();
                NodoDirectorio nuevoNodo = new NodoDirectorio(nombreProyecto,pathProyecto);
                nodoProyecto.add(nuevoNodo);
                modeloArbol.reload();
                
            }
        }
    }//GEN-LAST:event_nuevoProyectoActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VentanaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VentanaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VentanaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VentanaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VentanaPrincipal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTree arbolProyecto;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JButton nuevoProyecto;
    private javax.swing.JScrollPane scrollArbol;
    // End of variables declaration//GEN-END:variables
}
