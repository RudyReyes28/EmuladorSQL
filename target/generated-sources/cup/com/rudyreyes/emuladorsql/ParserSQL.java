
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.rudyreyes.emuladorsql;

import java.util.ArrayList;
import java_cup.runtime.*;
import com.rudyreyes.emuladorsql.modelo.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class ParserSQL extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ParserSQLSym.class;
}

  /** Default constructor. */
  @Deprecated
  public ParserSQL() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public ParserSQL(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ParserSQL(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\044\000\002\002\004\000\002\002\003\000\002\002" +
    "\003\000\002\002\003\000\002\002\003\000\002\023\010" +
    "\000\002\006\003\000\002\006\003\000\002\003\013\000" +
    "\002\007\005\000\002\007\003\000\002\010\005\000\002" +
    "\010\003\000\002\004\011\000\002\013\005\000\002\013" +
    "\003\000\002\014\005\000\002\005\007\000\002\015\005" +
    "\000\002\015\003\000\002\011\004\000\002\011\003\000" +
    "\002\012\005\000\002\012\003\000\002\016\005\000\002" +
    "\020\003\000\002\020\003\000\002\022\003\000\002\022" +
    "\003\000\002\022\003\000\002\022\003\000\002\022\003" +
    "\000\002\022\003\000\002\017\003\000\002\017\003\000" +
    "\002\021\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\107\000\012\004\014\006\012\007\010\011\011\001" +
    "\002\000\004\002\000\001\002\000\004\002\ufffe\001\002" +
    "\000\004\002\ufffd\001\002\000\004\002\uffff\001\002\000" +
    "\004\013\076\001\002\000\004\013\072\001\002\000\004" +
    "\013\053\001\002\000\004\002\052\001\002\000\006\020" +
    "\015\031\020\001\002\000\004\013\ufffb\001\002\000\004" +
    "\013\023\001\002\000\004\013\ufffa\001\002\000\010\013" +
    "\uffee\015\uffee\016\021\001\002\000\004\031\020\001\002" +
    "\000\006\013\uffef\015\uffef\001\002\000\004\032\024\001" +
    "\002\000\006\005\025\012\uffde\001\002\000\004\031\033" +
    "\001\002\000\004\012\uffec\001\002\000\004\012\030\001" +
    "\002\000\004\002\ufffc\001\002\000\010\012\uffea\027\046" +
    "\030\050\001\002\000\004\012\uffed\001\002\000\016\021" +
    "\042\022\034\023\035\024\036\025\040\026\041\001\002" +
    "\000\006\032\uffe5\033\uffe5\001\002\000\006\032\uffe4\033" +
    "\uffe4\001\002\000\006\032\uffe3\033\uffe3\001\002\000\006" +
    "\032\043\033\044\001\002\000\006\032\uffe2\033\uffe2\001" +
    "\002\000\006\032\uffe1\033\uffe1\001\002\000\006\032\uffe6" +
    "\033\uffe6\001\002\000\016\005\uffe8\012\uffe8\015\uffe8\016" +
    "\uffe8\027\uffe8\030\uffe8\001\002\000\016\005\uffe7\012\uffe7" +
    "\015\uffe7\016\uffe7\027\uffe7\030\uffe7\001\002\000\010\012" +
    "\uffe9\027\uffe9\030\uffe9\001\002\000\004\031\uffe0\001\002" +
    "\000\004\031\033\001\002\000\004\031\uffdf\001\002\000" +
    "\004\012\uffeb\001\002\000\004\002\001\001\002\000\004" +
    "\032\054\001\002\000\006\014\056\017\uffde\001\002\000" +
    "\004\017\ufff7\001\002\000\004\031\020\001\002\000\004" +
    "\017\060\001\002\000\004\014\061\001\002\000\006\032" +
    "\043\033\044\001\002\000\006\015\ufff5\016\066\001\002" +
    "\000\004\015\064\001\002\000\004\012\065\001\002\000" +
    "\004\002\ufff9\001\002\000\006\032\043\033\044\001\002" +
    "\000\004\015\ufff6\001\002\000\004\015\071\001\002\000" +
    "\004\017\ufff8\001\002\000\004\032\073\001\002\000\006" +
    "\005\025\012\uffde\001\002\000\004\012\075\001\002\000" +
    "\004\002\ufff0\001\002\000\004\032\077\001\002\000\004" +
    "\010\100\001\002\000\004\031\101\001\002\000\004\021" +
    "\110\001\002\000\006\005\025\012\uffde\001\002\000\010" +
    "\005\ufff2\012\ufff2\016\104\001\002\000\004\031\101\001" +
    "\002\000\006\005\ufff3\012\ufff3\001\002\000\004\012\107" +
    "\001\002\000\004\002\ufff4\001\002\000\006\032\043\033" +
    "\044\001\002\000\010\005\ufff1\012\ufff1\016\ufff1\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\107\000\014\002\012\003\006\004\004\005\005\023" +
    "\003\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\006\015" +
    "\015\016\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\015\021\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\011\026\021" +
    "\025\001\001\000\006\012\031\016\030\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\017" +
    "\046\001\001\000\002\001\001\000\004\022\036\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\020\044\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\012\050\016\030" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\007\056\021\054\001\001" +
    "\000\002\001\001\000\004\015\067\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\010\062\020\061\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\010\066\020\061\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\011\073\021\025\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\013\101\014\102\001\001\000\002\001\001\000\006" +
    "\011\105\021\025\001\001\000\002\001\001\000\006\013" +
    "\104\014\102\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\020\110\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParserSQL$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParserSQL$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParserSQL$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    String asterisco = "*";
    ArrayList<String> columnas = new ArrayList<>();
    ArrayList<Columna> condiciones = new ArrayList<>();
    ArrayList<String> operadoresLogicos = new ArrayList<>();

    
    void limpiarEstructuras() {
        columnas.clear();
        condiciones.clear();
        operadoresLogicos.clear();
        
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$ParserSQL$actions {
  private final ParserSQL parser;

  /** Constructor */
  CUP$ParserSQL$actions(ParserSQL parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ParserSQL$do_action_part00000000(
    int                        CUP$ParserSQL$act_num,
    java_cup.runtime.lr_parser CUP$ParserSQL$parser,
    java.util.Stack            CUP$ParserSQL$stack,
    int                        CUP$ParserSQL$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParserSQL$result;

      /* select the action based on the action number */
      switch (CUP$ParserSQL$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= instruccion EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-1)).value;
		RESULT = start_val;
              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-1)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ParserSQL$parser.done_parsing();
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // instruccion ::= seleccionar 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()).right;
		InstruccionSeleccionar s = (InstruccionSeleccionar)((java_cup.runtime.Symbol) CUP$ParserSQL$stack.peek()).value;
		RESULT = s; 
              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("instruccion",0, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // instruccion ::= insertar 
            {
              Object RESULT =null;
		 System.out.println("Se encontro la instruccion insertar"); 
              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("instruccion",0, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // instruccion ::= actualizar 
            {
              Object RESULT =null;
		 System.out.println("Se encontro la instruccion actualizar"); 
              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("instruccion",0, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // instruccion ::= eliminar 
            {
              Object RESULT =null;
		 System.out.println("Se encontro la instruccion eliminar"); 
              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("instruccion",0, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // seleccionar ::= SELECCIONAR listado EN LITERAL condiciones P_COMA 
            {
              InstruccionSeleccionar RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)).value;
		 
    System.out.println("Se encontro la instruccion seleccionar");
    
    //InstruccionSeleccionar seleccion = new InstruccionSeleccionar(asterisco, columnas, p,condiciones,operadoresLogicos);
    
    RESULT = new InstruccionSeleccionar(asterisco, columnas, p, condiciones, operadoresLogicos);;
    
    limpiarEstructuras();
   

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("seleccionar",17, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-5)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // listado ::= ASTERISCO 
            {
              Object RESULT =null;
		 asterisco = "*"; 
              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("listado",4, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // listado ::= columnas 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("listado",4, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // insertar ::= INSERTAR EN LITERAL tabla VALORES PARENTESIS_ABRE valores PARENTESIS_CIERRA P_COMA 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("insertar",1, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-8)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // tabla ::= PARENTESIS_ABRE columnas PARENTESIS_CIERRA 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("tabla",5, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // tabla ::= empty 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("tabla",5, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // valores ::= literal COMA valores 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("valores",6, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // valores ::= literal 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("valores",6, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // actualizar ::= ACTUALIZAR EN LITERAL ASIGNAR asignaciones condiciones P_COMA 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("actualizar",2, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-6)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // asignaciones ::= asignacion COMA asignaciones 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("asignaciones",9, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // asignaciones ::= asignacion 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("asignaciones",9, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // asignacion ::= NOMBRECOLUMNA SIMB_IGUAL literal 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("asignacion",10, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // eliminar ::= ELIMINAR EN LITERAL condiciones P_COMA 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("eliminar",3, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-4)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // columnas ::= NOMBRECOLUMNA COMA columnas 
            {
              Object RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)).right;
		String c1 = (String)((java_cup.runtime.Symbol) CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)).value;
		columnas.add(c1);
              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("columnas",11, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // columnas ::= NOMBRECOLUMNA 
            {
              Object RESULT =null;
		int c2left = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()).right;
		String c2 = (String)((java_cup.runtime.Symbol) CUP$ParserSQL$stack.peek()).value;
		columnas.add(c2);
              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("columnas",11, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // condiciones ::= FILTRAR condicion 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("condiciones",7, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-1)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // condiciones ::= empty 
            {
              Object RESULT =null;
		 System.out.println("no se encontro nada"); 
              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("condiciones",7, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // condicion ::= operacion_relacional operador_logico condicion 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("condicion",8, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // condicion ::= operacion_relacional 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("condicion",8, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // operacion_relacional ::= NOMBRECOLUMNA operador_relacional literal 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-1)).value;
		int lileft = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()).left;
		int liright = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()).right;
		Object li = (Object)((java_cup.runtime.Symbol) CUP$ParserSQL$stack.peek()).value;
		
    String operador = "";
    switch(o) {
        case "igual":
            operador = "=";
            break;
        case "menor":
            operador = "<";
            break;
        case "mayor":
            operador = ">";
            break;
        case "meigual":
            operador = "<=";
            break;
        case "maigual":
            operador = ">=";
            break;
        case "noigual":
            operador = "<>";
            break;
    }
    String valorLiteral = li.toString();
    condiciones.add(new Columna(c, o , valorLiteral)); 

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("operacion_relacional",12, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // literal ::= LITERAL 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$ParserSQL$stack.peek()).value;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("literal",14, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // literal ::= NUMBER 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$ParserSQL$stack.peek()).value;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("literal",14, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // operador_relacional ::= SIMB_IGUAL 
            {
              String RESULT =null;
		int igualleft = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()).left;
		int igualright = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()).right;
		Object igual = (Object)((java_cup.runtime.Symbol) CUP$ParserSQL$stack.peek()).value;
		RESULT = "igual";
              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("operador_relacional",16, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // operador_relacional ::= SIMB_MENOR 
            {
              String RESULT =null;
		int menorleft = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()).left;
		int menorright = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()).right;
		Object menor = (Object)((java_cup.runtime.Symbol) CUP$ParserSQL$stack.peek()).value;
		RESULT = "menor";
              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("operador_relacional",16, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // operador_relacional ::= SIMB_MAYOR 
            {
              String RESULT =null;
		int mayorleft = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()).left;
		int mayorright = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()).right;
		Object mayor = (Object)((java_cup.runtime.Symbol) CUP$ParserSQL$stack.peek()).value;
		RESULT = "mayor";
              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("operador_relacional",16, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // operador_relacional ::= SIMB_MENOR_IGUAL 
            {
              String RESULT =null;
		int meigualleft = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()).left;
		int meigualright = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()).right;
		Object meigual = (Object)((java_cup.runtime.Symbol) CUP$ParserSQL$stack.peek()).value;
		RESULT = "meigual";
              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("operador_relacional",16, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // operador_relacional ::= SIMB_MAYOR_IGUAL 
            {
              String RESULT =null;
		int maigualleft = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()).left;
		int maigualright = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()).right;
		Object maigual = (Object)((java_cup.runtime.Symbol) CUP$ParserSQL$stack.peek()).value;
		RESULT = "maigual";
              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("operador_relacional",16, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // operador_relacional ::= SIMB_NO_IGUAL 
            {
              String RESULT =null;
		int noigualleft = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()).left;
		int noigualright = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()).right;
		Object noigual = (Object)((java_cup.runtime.Symbol) CUP$ParserSQL$stack.peek()).value;
		RESULT = "noigual";
              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("operador_relacional",16, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // operador_logico ::= OP_AND 
            {
              Object RESULT =null;
		 operadoresLogicos.add("AND"); 
              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("operador_logico",13, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // operador_logico ::= OP_OR 
            {
              Object RESULT =null;
		 operadoresLogicos.add("OR"); 
              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("operador_logico",13, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // empty ::= 
            {
              Object RESULT =null;
		 System.out.println("no se encontro nada"); 
              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("empty",15, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ParserSQL$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ParserSQL$do_action(
    int                        CUP$ParserSQL$act_num,
    java_cup.runtime.lr_parser CUP$ParserSQL$parser,
    java.util.Stack            CUP$ParserSQL$stack,
    int                        CUP$ParserSQL$top)
    throws java.lang.Exception
    {
              return CUP$ParserSQL$do_action_part00000000(
                               CUP$ParserSQL$act_num,
                               CUP$ParserSQL$parser,
                               CUP$ParserSQL$stack,
                               CUP$ParserSQL$top);
    }
}

}
