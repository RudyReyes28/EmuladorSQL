
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.rudyreyes.emuladorsql.vista;

import java.util.ArrayList;
import java_cup.runtime.*;
import com.rudyreyes.emuladorsql.modelo.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class ParserSQL extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ParserSQLSym.class;
}

  /** Default constructor. */
  @Deprecated
  public ParserSQL() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public ParserSQL(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ParserSQL(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\057\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\021\010\000" +
    "\002\004\003\000\002\004\003\000\002\022\013\000\002" +
    "\005\005\000\002\005\003\000\002\005\003\000\002\006" +
    "\005\000\002\006\003\000\002\023\011\000\002\011\005" +
    "\000\002\011\003\000\002\012\005\000\002\012\003\000" +
    "\002\024\007\000\002\013\005\000\002\013\003\000\002" +
    "\013\003\000\002\007\004\000\002\007\003\000\002\007" +
    "\003\000\002\010\005\000\002\010\003\000\002\014\005" +
    "\000\002\014\003\000\002\020\003\000\002\020\003\000" +
    "\002\020\003\000\002\017\003\000\002\017\003\000\002" +
    "\017\003\000\002\017\003\000\002\017\003\000\002\017" +
    "\003\000\002\017\003\000\002\015\003\000\002\015\003" +
    "\000\002\015\003\000\002\016\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\122\000\014\003\016\004\015\006\012\007\010\011" +
    "\011\001\002\000\016\002\ufffe\003\ufffe\004\ufffe\006\ufffe" +
    "\007\ufffe\011\ufffe\001\002\000\016\002\ufffc\003\ufffc\004" +
    "\ufffc\006\ufffc\007\ufffc\011\ufffc\001\002\000\016\002\ufffb" +
    "\003\ufffb\004\ufffb\006\ufffb\007\ufffb\011\ufffb\001\002\000" +
    "\016\002\ufffd\003\ufffd\004\ufffd\006\ufffd\007\ufffd\011\ufffd" +
    "\001\002\000\004\013\110\001\002\000\004\013\104\001" +
    "\002\000\004\013\064\001\002\000\004\002\063\001\002" +
    "\000\016\002\uffff\003\016\004\015\006\012\007\010\011" +
    "\011\001\002\000\010\003\021\020\017\031\023\001\002" +
    "\000\016\002\ufffa\003\ufffa\004\ufffa\006\ufffa\007\ufffa\011" +
    "\ufffa\001\002\000\004\013\ufff8\001\002\000\004\013\026" +
    "\001\002\000\006\013\uffe8\015\uffe8\001\002\000\004\013" +
    "\ufff7\001\002\000\010\013\uffe9\015\uffe9\016\024\001\002" +
    "\000\006\003\021\031\023\001\002\000\006\013\uffea\015" +
    "\uffea\001\002\000\004\032\027\001\002\000\010\003\030" +
    "\005\031\012\uffd3\001\002\000\004\012\uffe5\001\002\000" +
    "\006\003\036\031\040\001\002\000\004\012\uffe6\001\002" +
    "\000\004\012\034\001\002\000\016\002\ufff9\003\ufff9\004" +
    "\ufff9\006\ufff9\007\ufff9\011\ufff9\001\002\000\012\003\056" +
    "\012\uffe3\027\055\030\060\001\002\000\012\003\uffe1\012" +
    "\uffe1\027\uffe1\030\uffe1\001\002\000\004\012\uffe7\001\002" +
    "\000\020\003\042\021\050\022\041\023\043\024\044\025" +
    "\046\026\047\001\002\000\010\003\uffdc\032\uffdc\033\uffdc" +
    "\001\002\000\010\003\uffd7\032\uffd7\033\uffd7\001\002\000" +
    "\010\003\uffdb\032\uffdb\033\uffdb\001\002\000\010\003\uffda" +
    "\032\uffda\033\uffda\001\002\000\010\003\052\032\051\033" +
    "\053\001\002\000\010\003\uffd9\032\uffd9\033\uffd9\001\002" +
    "\000\010\003\uffd8\032\uffd8\033\uffd8\001\002\000\010\003" +
    "\uffdd\032\uffdd\033\uffdd\001\002\000\020\003\uffe0\005\uffe0" +
    "\012\uffe0\015\uffe0\016\uffe0\027\uffe0\030\uffe0\001\002\000" +
    "\020\003\uffde\005\uffde\012\uffde\015\uffde\016\uffde\027\uffde" +
    "\030\uffde\001\002\000\020\003\uffdf\005\uffdf\012\uffdf\015" +
    "\uffdf\016\uffdf\027\uffdf\030\uffdf\001\002\000\012\003\uffe2" +
    "\012\uffe2\027\uffe2\030\uffe2\001\002\000\006\003\uffd6\031" +
    "\uffd6\001\002\000\006\003\uffd4\031\uffd4\001\002\000\006" +
    "\003\036\031\040\001\002\000\006\003\uffd5\031\uffd5\001" +
    "\002\000\004\012\uffe4\001\002\000\004\002\000\001\002" +
    "\000\004\002\001\001\002\000\004\032\065\001\002\000" +
    "\010\003\066\014\070\017\uffd3\001\002\000\004\017\ufff3" +
    "\001\002\000\004\017\ufff4\001\002\000\006\003\021\031" +
    "\023\001\002\000\004\017\072\001\002\000\004\014\073" +
    "\001\002\000\010\003\052\032\051\033\053\001\002\000" +
    "\006\015\ufff1\016\100\001\002\000\004\015\076\001\002" +
    "\000\004\012\077\001\002\000\016\002\ufff6\003\ufff6\004" +
    "\ufff6\006\ufff6\007\ufff6\011\ufff6\001\002\000\010\003\052" +
    "\032\051\033\053\001\002\000\004\015\ufff2\001\002\000" +
    "\004\015\103\001\002\000\004\017\ufff5\001\002\000\004" +
    "\032\105\001\002\000\010\003\030\005\031\012\uffd3\001" +
    "\002\000\004\012\107\001\002\000\016\002\uffeb\003\uffeb" +
    "\004\uffeb\006\uffeb\007\uffeb\011\uffeb\001\002\000\004\032" +
    "\111\001\002\000\004\010\112\001\002\000\006\003\113" +
    "\031\114\001\002\000\012\003\uffec\005\uffec\012\uffec\016" +
    "\uffec\001\002\000\004\021\123\001\002\000\010\003\030" +
    "\005\031\012\uffd3\001\002\000\012\003\uffee\005\uffee\012" +
    "\uffee\016\117\001\002\000\006\003\113\031\114\001\002" +
    "\000\010\003\uffef\005\uffef\012\uffef\001\002\000\004\012" +
    "\122\001\002\000\016\002\ufff0\003\ufff0\004\ufff0\006\ufff0" +
    "\007\ufff0\011\ufff0\001\002\000\010\003\052\032\051\033" +
    "\053\001\002\000\012\003\uffed\005\uffed\012\uffed\016\uffed" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\122\000\016\002\012\003\013\021\003\022\006\023" +
    "\004\024\005\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\002\061\003\013\021\003\022\006\023\004\024\005\001" +
    "\001\000\006\004\017\013\021\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\013\024\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\007\032\016" +
    "\031\001\001\000\002\001\001\000\006\010\036\014\034" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\015\056\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\017\044\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\020\053\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\010\060\014\034\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\005\070\016\066\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\013\101\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\006\074\020\073" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\006\100\020\073\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\007\105\016\031\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\011\114\012\115\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\007\120\016\031\001\001\000" +
    "\002\001\001\000\006\011\117\012\115\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\020" +
    "\123\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParserSQL$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParserSQL$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParserSQL$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    String asterisco = "";
    ArrayList<String> columnas = new ArrayList<>();
    ArrayList<Columna> actualizarColumnas = new ArrayList<>();
    ArrayList<Columna> condiciones = new ArrayList<>();
    ArrayList<String> operadoresLogicos = new ArrayList<>();
    ArrayList<String> valoresInsertar = new ArrayList<>();
    ArrayList<Object> consultas = new ArrayList<>();
    ArrayList<String> errores = new ArrayList<>();
    
    void limpiarEstructuras() {
        columnas.clear();
        condiciones.clear();
        operadoresLogicos.clear();
        valoresInsertar.clear();
        consultas.clear();
        actualizarColumnas.clear();
        asterisco = "";
        
    }

    ArrayList<Object> obtenerConsultas(){
        return consultas;
    }

    ArrayList<String> obtenerErrores(){
        return errores;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$ParserSQL$actions {
  private final ParserSQL parser;

  /** Constructor */
  CUP$ParserSQL$actions(ParserSQL parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ParserSQL$do_action_part00000000(
    int                        CUP$ParserSQL$act_num,
    java_cup.runtime.lr_parser CUP$ParserSQL$parser,
    java.util.Stack            CUP$ParserSQL$stack,
    int                        CUP$ParserSQL$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParserSQL$result;

      /* select the action based on the action number */
      switch (CUP$ParserSQL$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= listas_instrucciones EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-1)).value;
		RESULT = start_val;
              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-1)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ParserSQL$parser.done_parsing();
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // listas_instrucciones ::= instruccion listas_instrucciones 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-1)).value;
		 consultas.add(i); 
              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("listas_instrucciones",0, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-1)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // listas_instrucciones ::= instruccion 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$ParserSQL$stack.peek()).value;
		 consultas.add(i); 
              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("listas_instrucciones",0, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // instruccion ::= seleccionar 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()).right;
		InstruccionSeleccionar s = (InstruccionSeleccionar)((java_cup.runtime.Symbol) CUP$ParserSQL$stack.peek()).value;
		RESULT = s; 
              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("instruccion",1, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // instruccion ::= insertar 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()).right;
		InstruccionInsertar i = (InstruccionInsertar)((java_cup.runtime.Symbol) CUP$ParserSQL$stack.peek()).value;
		RESULT = i; 
              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("instruccion",1, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // instruccion ::= actualizar 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()).right;
		InstruccionActualizar a = (InstruccionActualizar)((java_cup.runtime.Symbol) CUP$ParserSQL$stack.peek()).value;
		RESULT = a; 
              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("instruccion",1, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // instruccion ::= eliminar 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()).right;
		InstruccionEliminar e = (InstruccionEliminar)((java_cup.runtime.Symbol) CUP$ParserSQL$stack.peek()).value;
		 RESULT = e; 
              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("instruccion",1, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // instruccion ::= error 
            {
              Object RESULT =null;
		 
                errores.add("Error, no se reconoce el simbolo inincial "+ cur_token.value +" fila: "+cur_token.left + " columna: " + cur_token.right);
                
                
              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("instruccion",1, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // seleccionar ::= SELECCIONAR listado EN LITERAL condiciones P_COMA 
            {
              InstruccionSeleccionar RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)).value;
		 
    ArrayList<String> columnasCopia = new ArrayList<>(columnas);
    ArrayList<Columna> condicionesCopia = new ArrayList<>(condiciones);
    ArrayList<String> operadoresLogicosCopia = new ArrayList<>(operadoresLogicos);

    RESULT = new InstruccionSeleccionar(asterisco, columnasCopia, p, condicionesCopia, operadoresLogicosCopia);

    limpiarEstructuras();
   
    
              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("seleccionar",15, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-5)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // listado ::= ASTERISCO 
            {
              Object RESULT =null;
		 asterisco = "*"; 
              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("listado",2, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // listado ::= columnas 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("listado",2, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // insertar ::= INSERTAR EN LITERAL tabla VALORES PARENTESIS_ABRE valores PARENTESIS_CIERRA P_COMA 
            {
              InstruccionInsertar RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-6)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-6)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-6)).value;
		 
        ArrayList<String> columnasCopia = new ArrayList<>(columnas);
         ArrayList<String> valoresCopia = new ArrayList<>(valoresInsertar);
         
        RESULT = new InstruccionInsertar(p, columnasCopia, valoresCopia);

        limpiarEstructuras();
        
              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("insertar",16, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-8)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // tabla ::= PARENTESIS_ABRE columnas PARENTESIS_CIERRA 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("tabla",3, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // tabla ::= empty 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("tabla",3, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // tabla ::= error 
            {
              Object RESULT =null;
		 
        errores.add("Error sintáctico en los parentesis cerca de: " + cur_token.value+ " fila: "+cur_token.left + " columna: " + cur_token.right );
    
              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("tabla",3, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // valores ::= literal COMA valores 
            {
              Object RESULT =null;
		int lileft = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)).left;
		int liright = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)).right;
		String li = (String)((java_cup.runtime.Symbol) CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)).value;
		valoresInsertar.add(li);
              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("valores",4, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // valores ::= literal 
            {
              Object RESULT =null;
		int li2left = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()).left;
		int li2right = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()).right;
		String li2 = (String)((java_cup.runtime.Symbol) CUP$ParserSQL$stack.peek()).value;
		valoresInsertar.add(li2);
              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("valores",4, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // actualizar ::= ACTUALIZAR EN LITERAL ASIGNAR asignaciones condiciones P_COMA 
            {
              InstruccionActualizar RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-4)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-4)).value;
		
                    ArrayList<Columna> columnasCopia = new ArrayList<>(actualizarColumnas);
                    ArrayList<Columna> condicionesCopia = new ArrayList<>(condiciones);
                    ArrayList<String> operadoresLogicosCopia = new ArrayList<>(operadoresLogicos);

                    RESULT = new InstruccionActualizar(p, columnasCopia, condicionesCopia, operadoresLogicosCopia);

                    limpiarEstructuras();
                
              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("actualizar",17, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-6)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // asignaciones ::= asignacion COMA asignaciones 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("asignaciones",7, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // asignaciones ::= asignacion 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("asignaciones",7, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // asignacion ::= NOMBRECOLUMNA SIMB_IGUAL literal 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)).value;
		int lileft = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()).left;
		int liright = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()).right;
		String li = (String)((java_cup.runtime.Symbol) CUP$ParserSQL$stack.peek()).value;
		
                actualizarColumnas.add(new Columna(c, "=" , li)); 
            
              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("asignacion",8, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // asignacion ::= error 
            {
              Object RESULT =null;
		 
        errores.add("Error sintáctico en la asignacion cerca de: " + cur_token.value+ " fila: "+cur_token.left + " columna: " + cur_token.right);
    
              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("asignacion",8, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // eliminar ::= ELIMINAR EN LITERAL condiciones P_COMA 
            {
              InstruccionEliminar RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)).value;
		
                    ArrayList<Columna> condicionesCopia = new ArrayList<>(condiciones);
                    ArrayList<String> operadoresLogicosCopia = new ArrayList<>(operadoresLogicos);

                    RESULT = new InstruccionEliminar(p, condicionesCopia, operadoresLogicosCopia);

                    limpiarEstructuras();
                
              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("eliminar",18, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-4)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // columnas ::= NOMBRECOLUMNA COMA columnas 
            {
              Object RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)).right;
		String c1 = (String)((java_cup.runtime.Symbol) CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)).value;
		columnas.add(c1);
              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("columnas",9, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // columnas ::= NOMBRECOLUMNA 
            {
              Object RESULT =null;
		int c2left = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()).right;
		String c2 = (String)((java_cup.runtime.Symbol) CUP$ParserSQL$stack.peek()).value;
		columnas.add(c2);
              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("columnas",9, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // columnas ::= error 
            {
              Object RESULT =null;
		 
        errores.add("Error sintáctico al nombrar las columnas cerca de: " + cur_token.value+ " fila: "+cur_token.left + " columna: " + cur_token.right);
    
              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("columnas",9, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // condiciones ::= FILTRAR condicion 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("condiciones",5, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-1)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // condiciones ::= empty 
            {
              Object RESULT =null;
		 System.out.println("no se encontro nada"); 
              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("condiciones",5, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // condiciones ::= error 
            {
              Object RESULT =null;
		 
                errores.add("Error sintáctico al FILTRAR las condiciones cerca de: " + cur_token.value+ " fila: "+cur_token.left + " columna: " + cur_token.right);
                
              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("condiciones",5, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // condicion ::= operacion_relacional operador_logico condicion 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("condicion",6, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // condicion ::= operacion_relacional 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("condicion",6, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // operacion_relacional ::= NOMBRECOLUMNA operador_relacional literal 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-1)).value;
		int lileft = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()).left;
		int liright = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()).right;
		String li = (String)((java_cup.runtime.Symbol) CUP$ParserSQL$stack.peek()).value;
		
    condiciones.add(new Columna(c, o , li)); 

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("operacion_relacional",10, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.elementAt(CUP$ParserSQL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // operacion_relacional ::= error 
            {
              Object RESULT =null;
		 
        errores.add("Error sintáctico en la operacion relacional cerca de: " + cur_token.value+ " fila: "+cur_token.left + " columna: " + cur_token.right);
    
              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("operacion_relacional",10, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // literal ::= LITERAL 
            {
              String RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$ParserSQL$stack.peek()).value;
		RESULT = l; 
              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("literal",14, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // literal ::= NUMBER 
            {
              String RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$ParserSQL$stack.peek()).value;
		RESULT = n; 
              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("literal",14, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // literal ::= error 
            {
              String RESULT =null;
		 
            errores.add("Error sintáctico en la literal : " + cur_token.value+ " fila: "+cur_token.left + " columna: " + cur_token.right);
    
              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("literal",14, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // operador_relacional ::= SIMB_IGUAL 
            {
              String RESULT =null;
		int igualleft = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()).left;
		int igualright = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()).right;
		Object igual = (Object)((java_cup.runtime.Symbol) CUP$ParserSQL$stack.peek()).value;
		RESULT = "=";
              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("operador_relacional",13, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // operador_relacional ::= SIMB_MENOR 
            {
              String RESULT =null;
		int menorleft = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()).left;
		int menorright = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()).right;
		Object menor = (Object)((java_cup.runtime.Symbol) CUP$ParserSQL$stack.peek()).value;
		RESULT = "<";
              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("operador_relacional",13, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // operador_relacional ::= SIMB_MAYOR 
            {
              String RESULT =null;
		int mayorleft = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()).left;
		int mayorright = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()).right;
		Object mayor = (Object)((java_cup.runtime.Symbol) CUP$ParserSQL$stack.peek()).value;
		RESULT = ">";
              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("operador_relacional",13, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // operador_relacional ::= SIMB_MENOR_IGUAL 
            {
              String RESULT =null;
		int meigualleft = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()).left;
		int meigualright = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()).right;
		Object meigual = (Object)((java_cup.runtime.Symbol) CUP$ParserSQL$stack.peek()).value;
		RESULT = "<=";
              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("operador_relacional",13, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // operador_relacional ::= SIMB_MAYOR_IGUAL 
            {
              String RESULT =null;
		int maigualleft = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()).left;
		int maigualright = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()).right;
		Object maigual = (Object)((java_cup.runtime.Symbol) CUP$ParserSQL$stack.peek()).value;
		RESULT = ">=";
              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("operador_relacional",13, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // operador_relacional ::= SIMB_NO_IGUAL 
            {
              String RESULT =null;
		int noigualleft = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()).left;
		int noigualright = ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()).right;
		Object noigual = (Object)((java_cup.runtime.Symbol) CUP$ParserSQL$stack.peek()).value;
		RESULT = "<>";
              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("operador_relacional",13, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // operador_relacional ::= error 
            {
              String RESULT =null;
		 
        errores.add("Error sintáctico en el operador relacional cerca de: "+ cur_token.value+ " fila: "+cur_token.left + " columna: " + cur_token.right);
    
              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("operador_relacional",13, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // operador_logico ::= OP_AND 
            {
              Object RESULT =null;
		 operadoresLogicos.add("AND"); 
              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("operador_logico",11, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // operador_logico ::= OP_OR 
            {
              Object RESULT =null;
		 operadoresLogicos.add("OR"); 
              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("operador_logico",11, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // operador_logico ::= error 
            {
              Object RESULT =null;
		 
                errores.add("Error sintáctico en el operador logico cerca de: " + cur_token.value+ " fila: "+cur_token.left + " columna: " + cur_token.right);
    
              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("operador_logico",11, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // empty ::= 
            {
              Object RESULT =null;

              CUP$ParserSQL$result = parser.getSymbolFactory().newSymbol("empty",12, ((java_cup.runtime.Symbol)CUP$ParserSQL$stack.peek()), RESULT);
            }
          return CUP$ParserSQL$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ParserSQL$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ParserSQL$do_action(
    int                        CUP$ParserSQL$act_num,
    java_cup.runtime.lr_parser CUP$ParserSQL$parser,
    java.util.Stack            CUP$ParserSQL$stack,
    int                        CUP$ParserSQL$top)
    throws java.lang.Exception
    {
              return CUP$ParserSQL$do_action_part00000000(
                               CUP$ParserSQL$act_num,
                               CUP$ParserSQL$parser,
                               CUP$ParserSQL$stack,
                               CUP$ParserSQL$top);
    }
}

}
